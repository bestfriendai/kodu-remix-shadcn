// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String
  name           String?
  role           String   @default("SUBSCRIBER")
  bio            String?
  profileImage   String?
  coverImage     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ageVerified    Boolean  @default(false)
  
  // Relations
  createdContent Content[]
  subscriptions  Subscription[] @relation("Subscriber")
  subscribers    Subscription[] @relation("Creator")
  payments       Payment[]
  sentMessages     Message[]     @relation("Sender")
  receivedMessages Message[]     @relation("Recipient")
}

model Content {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  approved    Boolean  @default(false)
  
  // Relations
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
}

model Subscription {
  id         String   @id @default(uuid())
  startDate  DateTime @default(now())
  endDate    DateTime?
  status     String   @default("ACTIVE") // ACTIVE, CANCELLED, EXPIRED
  price      Float
  
  // Relations
  subscriber User     @relation("Subscriber", fields: [subscriberId], references: [id])
  subscriberId String
  creator    User     @relation("Creator", fields: [creatorId], references: [id])
  creatorId  String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payments   Payment[]

  @@unique([subscriberId, creatorId])
}

model Payment {
  id             String   @id @default(uuid())
  amount         Float
  currency       String   @default("JPY")
  status         String   // PENDING, COMPLETED, FAILED
  paymentMethod  String   // CREDIT_CARD, BANK_TRANSFER, etc.
  transactionId  String?  // ID from payment gateway
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  recipient  User     @relation("Recipient", fields: [recipientId], references: [id])
  recipientId String

  @@index([senderId, recipientId])
}
